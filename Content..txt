import matplotlib.pyplot as plt
import os

# Create a directory to save plots if it doesn't exist
plot_dir = 'output_plots'
if not os.path.exists(plot_dir):
    os.makedirs(plot_dir)

# Define a function to save and plot output scores
def save_and_plot_output_scores(model, dataset, title, epoch):
    output_scores_list = []
    labels_list = []
    with torch.no_grad():
        for state_sequence, tag in dataset:
            sentence_in, label = prepare_sequence(state_sequence, tag)
            output_scores = model(sentence_in)
            output_scores_list.append(output_scores.numpy())
            labels_list.append(tag)
    
    output_scores_array = np.concatenate(output_scores_list)
    plt.figure(figsize=(10, 6))
    plt.plot(output_scores_array[:, 0], label='Output Score for Class 0', alpha=0.5)
    plt.plot(output_scores_array[:, 1], label='Output Score for Class 1', alpha=0.5)
    plt.plot(output_scores_array[:, 2], label='Output Score for Class 2', alpha=0.5)
    plt.xlabel('Sample Index')
    plt.ylabel('Output Score')
    plt.title(title)
    plt.legend()
    plt.savefig(os.path.join(plot_dir, f'epoch_{epoch}_output_scores.png'))  # Save plot
    plt.close()  # Close the plot to free memory

# Inside your training loop
for epoch in range(1, num_epoch+1):
    # Previous code for training and evaluation
    
    # Plot and save output scores for training set
    save_and_plot_output_scores(model, training_set, 'Training Set Output Scores', epoch)

    # Plot and save output scores for testing set
    save_and_plot_output_scores(model, testing_set, 'Testing Set Output Scores', epoch

import os

def evaluate_new_record(model_path, record_file):
    # Construct the model file path using os.path.join
    model_file = os.path.join(model_path, 'model.pth')

    # Load the model
    model = PredicterRNN(state_dim, hidden_dim, output_size,
                         states_per_sequence, num_lstm_layers)
    model.load_state_dict(torch.load(model_file))
    model.eval()

    # Load the new record.pickle file
    with open(record_file, 'rb') as f:
        new_record = pickle.load(f)

    # Prepare sequence and evaluate
    for state_sequence, tag in new_record:
        sentence_in, label = prepare_sequence(state_sequence, tag)
        output_scores = model(sentence_in)
        _, predicted_label = output_scores[-1].max(0)
        print("Predicted Label:", predicted_label.item())

# Specify the directory containing the model file
model_directory = 'Model'

# Specify the path to the new record file
new_record_file = 'record.pickle'

# Evaluate the new record file
evaluate_new_record(model_directory, new_record_file)


import pandas as pd
import plotly.graph_objects as go

# Example DataFrame
data = {
    'id': [1, 1, 1, 2, 2, 2],
    'frame': [1, 2, 3, 1, 2, 3],
    'x': [1, 2, 3, 4, 5, 6],
    'y': [2, 3, 4, 5, 6, 7],
    'label': ['A', 'A', 'B', 'B', 'C', 'C'],
    'pred': ['X', 'X', 'Y', 'Y', 'Z', 'Z']
}

df = pd.DataFrame(data)

# Group data by 'id'
grouped = df.groupby('id')

# Plot each group separately
for name, group in grouped:
    fig = go.Figure()
    for _, row in group.iterrows():
        fig.add_trace(
            go.Scatter(x=[row['x']], y=[row['y']],
                       mode='markers',
                       marker=dict(color=row['label'] + row['pred'], size=10),
                       name=f"Frame {row['frame']}"))
    fig.update_layout(title=f"Plot for ID {name}",
                      xaxis_title="X",
                      yaxis_title="Y")
    fig.show()
df = pd.DataFrame(data)

# Group data by 'id'
grouped = df.groupby('id')

# Plot each group separately
for name, group in grouped:
    plt.figure()
    for _, row in group.iterrows():
        plt.scatter(row['x'], row['y'], label=f"Frame {row['frame']}", color=row['label'] + row['pred'], s=100)
    plt.title(f"Plot for ID {name}")
    plt.xlabel("X")
    plt.ylabel("Y")
    plt.legend()
    plt.show()
